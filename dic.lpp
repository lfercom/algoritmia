arreglo[10,4] de cadena[50] diccionario

procedimiento cargar(var arreglo[10,4] de cadena[50] diccionario)
inicio
	//Español - Ingles - Frances
    diccionario[1,1] <- "Amor"
    diccionario[1,2] <- "Love"
    diccionario[1,3] <- "Amour"
    
    diccionario[2,1] <- "Casa"
    diccionario[2,2] <- "House"
    diccionario[2,3] <- "Maison"
    
    diccionario[3,1] <- "Mujer"
    diccionario[3,2] <- "Woman"
    diccionario[3,3] <- "Femme"
fin

procedimiento captura(arreglo[10,4] de cadena[50] diccionario)
    entero origen,destino
    cadena[50] palabra
    caracter siga
inicio
    repita
        llamar limpiar_pantalla
        llamar posicionar_cursor(5,5)
        escriba "Palabra : "
        llamar posicionar_cursor(5,7)
        escriba "1. Espanol 2. Ingles 3. Frances : "
        llamar posicionar_cursor(5,9)
        escriba "1. Espanol 2. Ingles 3. Frances : "
        llamar posicionar_cursor(15,5)
        lea palabra
        si(palabra <> ".") entonces
            llamar posicionar_cursor(40,7)
            lea origen
            llamar posicionar_cursor(40,9)
            lea destino
            llamar posicionar_cursor(5,11)
            escriba "Plabra traducida: ", traducir(diccionario,palabra,origen,destino)
            lea siga
        fin si
    hasta(palabra = ".")
fin

funcion traducir(arreglo[10,4] de cadena[50] diccionario,cadena[50] palabra,entero origen,entero destino):cadena[50]
    entero i
inicio
    para i <- 1 hasta 3 haga
        si(palabra = diccionario[i,origen]) entonces
            retorne diccionario[i,destino]
        fin si
    fin para
    retorne "Palabra no encontrada"
fin

procedimiento mostrar(arreglo[10,4] de cadena[50] diccionario)
    entero i,j,col
inicio
    para i <- 1 hasta 3 haga
        col <- 5
        para j <- 1 hasta 3 haga
            llamar  posicionar_cursor(col,i)
            escriba diccionario[i,j]
            col <- col + 15
        fin para
    fin para
fin

inicio
    llamar cargar(diccionario)
    llamar captura(diccionario)
fin